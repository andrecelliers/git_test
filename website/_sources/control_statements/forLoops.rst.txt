.. role:: p(code)
   :language: python


:p:`for` Loops
==============

The real power of computers is that they can repeat the same action billions of times without complaint or fatigue.  In Python (as most other languages), programmers can use a :p:`for` loop to repeatedly execute a block of code. 

.. warning::
    Like most Python syntax, :p:`for` loops are white-space sensitive.  The lines indented below the initializing :p:`for` loop line will be included in the loop, while those which are below but not indented will not be part of the :p:`for` loop.  

The keyword :p:`for` signals that a loop is being initialized, with the keyword :p:`in` indicating what is being looped over. A :p:`for` loop can be created as follows:

.. code-block:: python

    for letter in 'abc':
        print(letter.upper())

Output:

.. code-block:: python

    A
    B
    C

In the above example, The :p:`for` loop repeatedly printed each individual element in the string, converting each element of the string to uppercase using the :p:`upper()` string method.

.. note::
    The variable that comes after :p:`for` is known as the *iterator*.  When looping (iterating) over a list, it is common to use the singular form of the list name (i.e. :p:`book` may iterate over list :p:`books`).  Another common convention is to use the letter :p:`i`, short for *iterator*.


Looping Over Lists
------------------

:ref:`lists` and :p:`for` loops are often combined.  It is extremely common to declare a list and then iterate over it:

.. code-block:: python

    favBooks = ['mastery', 'the signal and the noise', 'the organized mind']

    print("My favourite books include:)
    for book in favBooks:
        print("\t" + book.title())

Output:

.. code-block::

    My favourite books include:
        Mastery
        The Signal And The Noise
        The Organized Mind

:p:`for` Loops and the :p:`range()` Function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

It is very common to loop over a :p:`range()` function to create a list of numbers:

.. code-block:: python

    for number in range(1,11):
        print(number)

Which would output:

.. code-block:: python

    1
    2
    3
    4
    5
    6
    7
    8
    9
    10


.. warning::

   This is a very common source of the *"off by one"* error - remember that the :p:`range()` function stops *before* the last number - so counting from 1 to 10 means designating a range of 1 to 11.

:p:`range()` also accepts a third parameter, which indicates what the output should count by (i.e. count by 2, count by 3, etc.). Example:

.. code-block:: python

    for number in range(1,21,2):
        print(number)

Would result print out all the odd numbers up to 20, as it started counting from 1 and adds 2 each time:

.. code-block:: python

    1
    3
    5
    7
    9
    11
    13
    15
    17
    19    

Looping Over Dictionaries
-------------------------

You can loop over :ref:`dictionaries` as follows:

.. code-block:: python

    phone_numbers = {"Fred Flintstone":"+37682929928","Barney Rubble":"+423998200919"}
    for value in phone_numbers.keys():
        print(value)

Output:

.. code-block:: python

    Fred Flintstone
    Barney Rubble

You can loop over dictionary values:

.. code-block:: python

    phone_numbers = {"Fred Flintstone":"+37682929928","Barney Rubble":"+423998200919"}
    for value in phone_numbers.values():
        print(value)

Output:

.. code-block:: python

    +37682929928
    +423998200919

It is also possible to loop over dictionary items:

.. code-block:: python

    phone_numbers = {"Fred Flintstone":"+37682929928","Barney Rubble":"+423998200919"}
    for key, value in phone_numbers.items():
        print(key, value)

Output:

.. code-block:: python

    Fred Flintstone +37682929928
    Barney Rubble +423998200919
